# coding: utf-8

"""
    NamSor API v2

    NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!   # noqa: E501

    OpenAPI spec version: 2.0.10
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UserInfoOut(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uid': 'str',
        'email': 'str',
        'phone_number': 'str',
        'email_verified': 'bool',
        'display_name': 'str',
        'photo_url': 'str',
        'disabled': 'bool',
        'first_known_ip_address': 'str',
        'provider_id': 'str',
        'time_stamp': 'int',
        'verify_token': 'str',
        'api_key': 'str',
        'stripe_perishable_key': 'str',
        'stripe_customer_id': 'str',
        'other_infos': 'list[UserInfoOut]'
    }

    attribute_map = {
        'uid': 'uid',
        'email': 'email',
        'phone_number': 'phoneNumber',
        'email_verified': 'emailVerified',
        'display_name': 'displayName',
        'photo_url': 'photoUrl',
        'disabled': 'disabled',
        'first_known_ip_address': 'firstKnownIpAddress',
        'provider_id': 'providerId',
        'time_stamp': 'timeStamp',
        'verify_token': 'verifyToken',
        'api_key': 'apiKey',
        'stripe_perishable_key': 'stripePerishableKey',
        'stripe_customer_id': 'stripeCustomerId',
        'other_infos': 'otherInfos'
    }

    def __init__(self, uid=None, email=None, phone_number=None, email_verified=None, display_name=None, photo_url=None, disabled=None, first_known_ip_address=None, provider_id=None, time_stamp=None, verify_token=None, api_key=None, stripe_perishable_key=None, stripe_customer_id=None, other_infos=None):  # noqa: E501
        """UserInfoOut - a model defined in OpenAPI"""  # noqa: E501

        self._uid = None
        self._email = None
        self._phone_number = None
        self._email_verified = None
        self._display_name = None
        self._photo_url = None
        self._disabled = None
        self._first_known_ip_address = None
        self._provider_id = None
        self._time_stamp = None
        self._verify_token = None
        self._api_key = None
        self._stripe_perishable_key = None
        self._stripe_customer_id = None
        self._other_infos = None
        self.discriminator = None

        if uid is not None:
            self.uid = uid
        if email is not None:
            self.email = email
        if phone_number is not None:
            self.phone_number = phone_number
        if email_verified is not None:
            self.email_verified = email_verified
        if display_name is not None:
            self.display_name = display_name
        if photo_url is not None:
            self.photo_url = photo_url
        if disabled is not None:
            self.disabled = disabled
        if first_known_ip_address is not None:
            self.first_known_ip_address = first_known_ip_address
        if provider_id is not None:
            self.provider_id = provider_id
        if time_stamp is not None:
            self.time_stamp = time_stamp
        if verify_token is not None:
            self.verify_token = verify_token
        if api_key is not None:
            self.api_key = api_key
        if stripe_perishable_key is not None:
            self.stripe_perishable_key = stripe_perishable_key
        if stripe_customer_id is not None:
            self.stripe_customer_id = stripe_customer_id
        if other_infos is not None:
            self.other_infos = other_infos

    @property
    def uid(self):
        """Gets the uid of this UserInfoOut.  # noqa: E501


        :return: The uid of this UserInfoOut.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this UserInfoOut.


        :param uid: The uid of this UserInfoOut.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def email(self):
        """Gets the email of this UserInfoOut.  # noqa: E501


        :return: The email of this UserInfoOut.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserInfoOut.


        :param email: The email of this UserInfoOut.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone_number(self):
        """Gets the phone_number of this UserInfoOut.  # noqa: E501


        :return: The phone_number of this UserInfoOut.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UserInfoOut.


        :param phone_number: The phone_number of this UserInfoOut.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def email_verified(self):
        """Gets the email_verified of this UserInfoOut.  # noqa: E501


        :return: The email_verified of this UserInfoOut.  # noqa: E501
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """Sets the email_verified of this UserInfoOut.


        :param email_verified: The email_verified of this UserInfoOut.  # noqa: E501
        :type: bool
        """

        self._email_verified = email_verified

    @property
    def display_name(self):
        """Gets the display_name of this UserInfoOut.  # noqa: E501


        :return: The display_name of this UserInfoOut.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserInfoOut.


        :param display_name: The display_name of this UserInfoOut.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def photo_url(self):
        """Gets the photo_url of this UserInfoOut.  # noqa: E501


        :return: The photo_url of this UserInfoOut.  # noqa: E501
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this UserInfoOut.


        :param photo_url: The photo_url of this UserInfoOut.  # noqa: E501
        :type: str
        """

        self._photo_url = photo_url

    @property
    def disabled(self):
        """Gets the disabled of this UserInfoOut.  # noqa: E501


        :return: The disabled of this UserInfoOut.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this UserInfoOut.


        :param disabled: The disabled of this UserInfoOut.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def first_known_ip_address(self):
        """Gets the first_known_ip_address of this UserInfoOut.  # noqa: E501


        :return: The first_known_ip_address of this UserInfoOut.  # noqa: E501
        :rtype: str
        """
        return self._first_known_ip_address

    @first_known_ip_address.setter
    def first_known_ip_address(self, first_known_ip_address):
        """Sets the first_known_ip_address of this UserInfoOut.


        :param first_known_ip_address: The first_known_ip_address of this UserInfoOut.  # noqa: E501
        :type: str
        """

        self._first_known_ip_address = first_known_ip_address

    @property
    def provider_id(self):
        """Gets the provider_id of this UserInfoOut.  # noqa: E501


        :return: The provider_id of this UserInfoOut.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this UserInfoOut.


        :param provider_id: The provider_id of this UserInfoOut.  # noqa: E501
        :type: str
        """

        self._provider_id = provider_id

    @property
    def time_stamp(self):
        """Gets the time_stamp of this UserInfoOut.  # noqa: E501


        :return: The time_stamp of this UserInfoOut.  # noqa: E501
        :rtype: int
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this UserInfoOut.


        :param time_stamp: The time_stamp of this UserInfoOut.  # noqa: E501
        :type: int
        """

        self._time_stamp = time_stamp

    @property
    def verify_token(self):
        """Gets the verify_token of this UserInfoOut.  # noqa: E501


        :return: The verify_token of this UserInfoOut.  # noqa: E501
        :rtype: str
        """
        return self._verify_token

    @verify_token.setter
    def verify_token(self, verify_token):
        """Sets the verify_token of this UserInfoOut.


        :param verify_token: The verify_token of this UserInfoOut.  # noqa: E501
        :type: str
        """

        self._verify_token = verify_token

    @property
    def api_key(self):
        """Gets the api_key of this UserInfoOut.  # noqa: E501


        :return: The api_key of this UserInfoOut.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this UserInfoOut.


        :param api_key: The api_key of this UserInfoOut.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def stripe_perishable_key(self):
        """Gets the stripe_perishable_key of this UserInfoOut.  # noqa: E501


        :return: The stripe_perishable_key of this UserInfoOut.  # noqa: E501
        :rtype: str
        """
        return self._stripe_perishable_key

    @stripe_perishable_key.setter
    def stripe_perishable_key(self, stripe_perishable_key):
        """Sets the stripe_perishable_key of this UserInfoOut.


        :param stripe_perishable_key: The stripe_perishable_key of this UserInfoOut.  # noqa: E501
        :type: str
        """

        self._stripe_perishable_key = stripe_perishable_key

    @property
    def stripe_customer_id(self):
        """Gets the stripe_customer_id of this UserInfoOut.  # noqa: E501


        :return: The stripe_customer_id of this UserInfoOut.  # noqa: E501
        :rtype: str
        """
        return self._stripe_customer_id

    @stripe_customer_id.setter
    def stripe_customer_id(self, stripe_customer_id):
        """Sets the stripe_customer_id of this UserInfoOut.


        :param stripe_customer_id: The stripe_customer_id of this UserInfoOut.  # noqa: E501
        :type: str
        """

        self._stripe_customer_id = stripe_customer_id

    @property
    def other_infos(self):
        """Gets the other_infos of this UserInfoOut.  # noqa: E501


        :return: The other_infos of this UserInfoOut.  # noqa: E501
        :rtype: list[UserInfoOut]
        """
        return self._other_infos

    @other_infos.setter
    def other_infos(self, other_infos):
        """Sets the other_infos of this UserInfoOut.


        :param other_infos: The other_infos of this UserInfoOut.  # noqa: E501
        :type: list[UserInfoOut]
        """

        self._other_infos = other_infos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserInfoOut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
