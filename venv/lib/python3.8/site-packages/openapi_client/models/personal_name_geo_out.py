# coding: utf-8

"""
    NamSor API v2

    NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!   # noqa: E501

    OpenAPI spec version: 2.0.10
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PersonalNameGeoOut(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'score': 'float',
        'country': 'str',
        'country_alt': 'str',
        'region': 'str',
        'top_region': 'str',
        'sub_region': 'str',
        'countries_top': 'list[str]',
        'probability_calibrated': 'float',
        'probability_alt_calibrated': 'float'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'score': 'score',
        'country': 'country',
        'country_alt': 'countryAlt',
        'region': 'region',
        'top_region': 'topRegion',
        'sub_region': 'subRegion',
        'countries_top': 'countriesTop',
        'probability_calibrated': 'probabilityCalibrated',
        'probability_alt_calibrated': 'probabilityAltCalibrated'
    }

    def __init__(self, id=None, name=None, score=None, country=None, country_alt=None, region=None, top_region=None, sub_region=None, countries_top=None, probability_calibrated=None, probability_alt_calibrated=None):  # noqa: E501
        """PersonalNameGeoOut - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._score = None
        self._country = None
        self._country_alt = None
        self._region = None
        self._top_region = None
        self._sub_region = None
        self._countries_top = None
        self._probability_calibrated = None
        self._probability_alt_calibrated = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if score is not None:
            self.score = score
        if country is not None:
            self.country = country
        if country_alt is not None:
            self.country_alt = country_alt
        if region is not None:
            self.region = region
        if top_region is not None:
            self.top_region = top_region
        if sub_region is not None:
            self.sub_region = sub_region
        if countries_top is not None:
            self.countries_top = countries_top
        if probability_calibrated is not None:
            self.probability_calibrated = probability_calibrated
        if probability_alt_calibrated is not None:
            self.probability_alt_calibrated = probability_alt_calibrated

    @property
    def id(self):
        """Gets the id of this PersonalNameGeoOut.  # noqa: E501


        :return: The id of this PersonalNameGeoOut.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PersonalNameGeoOut.


        :param id: The id of this PersonalNameGeoOut.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PersonalNameGeoOut.  # noqa: E501


        :return: The name of this PersonalNameGeoOut.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PersonalNameGeoOut.


        :param name: The name of this PersonalNameGeoOut.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def score(self):
        """Gets the score of this PersonalNameGeoOut.  # noqa: E501


        :return: The score of this PersonalNameGeoOut.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this PersonalNameGeoOut.


        :param score: The score of this PersonalNameGeoOut.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def country(self):
        """Gets the country of this PersonalNameGeoOut.  # noqa: E501


        :return: The country of this PersonalNameGeoOut.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PersonalNameGeoOut.


        :param country: The country of this PersonalNameGeoOut.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def country_alt(self):
        """Gets the country_alt of this PersonalNameGeoOut.  # noqa: E501


        :return: The country_alt of this PersonalNameGeoOut.  # noqa: E501
        :rtype: str
        """
        return self._country_alt

    @country_alt.setter
    def country_alt(self, country_alt):
        """Sets the country_alt of this PersonalNameGeoOut.


        :param country_alt: The country_alt of this PersonalNameGeoOut.  # noqa: E501
        :type: str
        """

        self._country_alt = country_alt

    @property
    def region(self):
        """Gets the region of this PersonalNameGeoOut.  # noqa: E501


        :return: The region of this PersonalNameGeoOut.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this PersonalNameGeoOut.


        :param region: The region of this PersonalNameGeoOut.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def top_region(self):
        """Gets the top_region of this PersonalNameGeoOut.  # noqa: E501


        :return: The top_region of this PersonalNameGeoOut.  # noqa: E501
        :rtype: str
        """
        return self._top_region

    @top_region.setter
    def top_region(self, top_region):
        """Sets the top_region of this PersonalNameGeoOut.


        :param top_region: The top_region of this PersonalNameGeoOut.  # noqa: E501
        :type: str
        """

        self._top_region = top_region

    @property
    def sub_region(self):
        """Gets the sub_region of this PersonalNameGeoOut.  # noqa: E501


        :return: The sub_region of this PersonalNameGeoOut.  # noqa: E501
        :rtype: str
        """
        return self._sub_region

    @sub_region.setter
    def sub_region(self, sub_region):
        """Sets the sub_region of this PersonalNameGeoOut.


        :param sub_region: The sub_region of this PersonalNameGeoOut.  # noqa: E501
        :type: str
        """

        self._sub_region = sub_region

    @property
    def countries_top(self):
        """Gets the countries_top of this PersonalNameGeoOut.  # noqa: E501

        List countries (top 10)  # noqa: E501

        :return: The countries_top of this PersonalNameGeoOut.  # noqa: E501
        :rtype: list[str]
        """
        return self._countries_top

    @countries_top.setter
    def countries_top(self, countries_top):
        """Sets the countries_top of this PersonalNameGeoOut.

        List countries (top 10)  # noqa: E501

        :param countries_top: The countries_top of this PersonalNameGeoOut.  # noqa: E501
        :type: list[str]
        """

        self._countries_top = countries_top

    @property
    def probability_calibrated(self):
        """Gets the probability_calibrated of this PersonalNameGeoOut.  # noqa: E501


        :return: The probability_calibrated of this PersonalNameGeoOut.  # noqa: E501
        :rtype: float
        """
        return self._probability_calibrated

    @probability_calibrated.setter
    def probability_calibrated(self, probability_calibrated):
        """Sets the probability_calibrated of this PersonalNameGeoOut.


        :param probability_calibrated: The probability_calibrated of this PersonalNameGeoOut.  # noqa: E501
        :type: float
        """

        self._probability_calibrated = probability_calibrated

    @property
    def probability_alt_calibrated(self):
        """Gets the probability_alt_calibrated of this PersonalNameGeoOut.  # noqa: E501


        :return: The probability_alt_calibrated of this PersonalNameGeoOut.  # noqa: E501
        :rtype: float
        """
        return self._probability_alt_calibrated

    @probability_alt_calibrated.setter
    def probability_alt_calibrated(self, probability_alt_calibrated):
        """Sets the probability_alt_calibrated of this PersonalNameGeoOut.


        :param probability_alt_calibrated: The probability_alt_calibrated of this PersonalNameGeoOut.  # noqa: E501
        :type: float
        """

        self._probability_alt_calibrated = probability_alt_calibrated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonalNameGeoOut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
