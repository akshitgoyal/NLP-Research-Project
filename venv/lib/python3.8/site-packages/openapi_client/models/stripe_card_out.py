# coding: utf-8

"""
    NamSor API v2

    NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!   # noqa: E501

    OpenAPI spec version: 2.0.10
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class StripeCardOut(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'default_card': 'bool',
        'source_id': 'str',
        'exp_month': 'int',
        'exp_year': 'int',
        'last4': 'str',
        'brand': 'str'
    }

    attribute_map = {
        'default_card': 'defaultCard',
        'source_id': 'sourceId',
        'exp_month': 'expMonth',
        'exp_year': 'expYear',
        'last4': 'last4',
        'brand': 'brand'
    }

    def __init__(self, default_card=None, source_id=None, exp_month=None, exp_year=None, last4=None, brand=None):  # noqa: E501
        """StripeCardOut - a model defined in OpenAPI"""  # noqa: E501

        self._default_card = None
        self._source_id = None
        self._exp_month = None
        self._exp_year = None
        self._last4 = None
        self._brand = None
        self.discriminator = None

        if default_card is not None:
            self.default_card = default_card
        if source_id is not None:
            self.source_id = source_id
        if exp_month is not None:
            self.exp_month = exp_month
        if exp_year is not None:
            self.exp_year = exp_year
        if last4 is not None:
            self.last4 = last4
        if brand is not None:
            self.brand = brand

    @property
    def default_card(self):
        """Gets the default_card of this StripeCardOut.  # noqa: E501


        :return: The default_card of this StripeCardOut.  # noqa: E501
        :rtype: bool
        """
        return self._default_card

    @default_card.setter
    def default_card(self, default_card):
        """Sets the default_card of this StripeCardOut.


        :param default_card: The default_card of this StripeCardOut.  # noqa: E501
        :type: bool
        """

        self._default_card = default_card

    @property
    def source_id(self):
        """Gets the source_id of this StripeCardOut.  # noqa: E501


        :return: The source_id of this StripeCardOut.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this StripeCardOut.


        :param source_id: The source_id of this StripeCardOut.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def exp_month(self):
        """Gets the exp_month of this StripeCardOut.  # noqa: E501


        :return: The exp_month of this StripeCardOut.  # noqa: E501
        :rtype: int
        """
        return self._exp_month

    @exp_month.setter
    def exp_month(self, exp_month):
        """Sets the exp_month of this StripeCardOut.


        :param exp_month: The exp_month of this StripeCardOut.  # noqa: E501
        :type: int
        """

        self._exp_month = exp_month

    @property
    def exp_year(self):
        """Gets the exp_year of this StripeCardOut.  # noqa: E501


        :return: The exp_year of this StripeCardOut.  # noqa: E501
        :rtype: int
        """
        return self._exp_year

    @exp_year.setter
    def exp_year(self, exp_year):
        """Sets the exp_year of this StripeCardOut.


        :param exp_year: The exp_year of this StripeCardOut.  # noqa: E501
        :type: int
        """

        self._exp_year = exp_year

    @property
    def last4(self):
        """Gets the last4 of this StripeCardOut.  # noqa: E501


        :return: The last4 of this StripeCardOut.  # noqa: E501
        :rtype: str
        """
        return self._last4

    @last4.setter
    def last4(self, last4):
        """Sets the last4 of this StripeCardOut.


        :param last4: The last4 of this StripeCardOut.  # noqa: E501
        :type: str
        """

        self._last4 = last4

    @property
    def brand(self):
        """Gets the brand of this StripeCardOut.  # noqa: E501


        :return: The brand of this StripeCardOut.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this StripeCardOut.


        :param brand: The brand of this StripeCardOut.  # noqa: E501
        :type: str
        """

        self._brand = brand

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StripeCardOut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
