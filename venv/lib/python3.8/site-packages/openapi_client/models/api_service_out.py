# coding: utf-8

"""
    NamSor API v2

    NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!   # noqa: E501

    OpenAPI spec version: 2.0.10
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class APIServiceOut(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'service_name': 'str',
        'service_group': 'str',
        'cost_in_units': 'int'
    }

    attribute_map = {
        'service_name': 'serviceName',
        'service_group': 'serviceGroup',
        'cost_in_units': 'costInUnits'
    }

    def __init__(self, service_name=None, service_group=None, cost_in_units=None):  # noqa: E501
        """APIServiceOut - a model defined in OpenAPI"""  # noqa: E501

        self._service_name = None
        self._service_group = None
        self._cost_in_units = None
        self.discriminator = None

        if service_name is not None:
            self.service_name = service_name
        if service_group is not None:
            self.service_group = service_group
        if cost_in_units is not None:
            self.cost_in_units = cost_in_units

    @property
    def service_name(self):
        """Gets the service_name of this APIServiceOut.  # noqa: E501


        :return: The service_name of this APIServiceOut.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this APIServiceOut.


        :param service_name: The service_name of this APIServiceOut.  # noqa: E501
        :type: str
        """

        self._service_name = service_name

    @property
    def service_group(self):
        """Gets the service_group of this APIServiceOut.  # noqa: E501


        :return: The service_group of this APIServiceOut.  # noqa: E501
        :rtype: str
        """
        return self._service_group

    @service_group.setter
    def service_group(self, service_group):
        """Sets the service_group of this APIServiceOut.


        :param service_group: The service_group of this APIServiceOut.  # noqa: E501
        :type: str
        """

        self._service_group = service_group

    @property
    def cost_in_units(self):
        """Gets the cost_in_units of this APIServiceOut.  # noqa: E501


        :return: The cost_in_units of this APIServiceOut.  # noqa: E501
        :rtype: int
        """
        return self._cost_in_units

    @cost_in_units.setter
    def cost_in_units(self, cost_in_units):
        """Sets the cost_in_units of this APIServiceOut.


        :param cost_in_units: The cost_in_units of this APIServiceOut.  # noqa: E501
        :type: int
        """

        self._cost_in_units = cost_in_units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIServiceOut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
