# coding: utf-8

"""
    NamSor API v2

    NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!   # noqa: E501

    OpenAPI spec version: 2.0.10
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InvoiceItemOut(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'item_id': 'str',
        'amount': 'int',
        'currency': 'str',
        'description': 'str',
        'quantity': 'int',
        'subscription': 'str',
        'subscription_item': 'str',
        'invoice_item_type': 'str',
        'plan_nickname': 'str',
        'plan_desc': 'str',
        'plan_name': 'str'
    }

    attribute_map = {
        'item_id': 'itemId',
        'amount': 'amount',
        'currency': 'currency',
        'description': 'description',
        'quantity': 'quantity',
        'subscription': 'subscription',
        'subscription_item': 'subscriptionItem',
        'invoice_item_type': 'invoiceItemType',
        'plan_nickname': 'planNickname',
        'plan_desc': 'planDesc',
        'plan_name': 'planName'
    }

    def __init__(self, item_id=None, amount=None, currency=None, description=None, quantity=None, subscription=None, subscription_item=None, invoice_item_type=None, plan_nickname=None, plan_desc=None, plan_name=None):  # noqa: E501
        """InvoiceItemOut - a model defined in OpenAPI"""  # noqa: E501

        self._item_id = None
        self._amount = None
        self._currency = None
        self._description = None
        self._quantity = None
        self._subscription = None
        self._subscription_item = None
        self._invoice_item_type = None
        self._plan_nickname = None
        self._plan_desc = None
        self._plan_name = None
        self.discriminator = None

        if item_id is not None:
            self.item_id = item_id
        if amount is not None:
            self.amount = amount
        if currency is not None:
            self.currency = currency
        if description is not None:
            self.description = description
        if quantity is not None:
            self.quantity = quantity
        if subscription is not None:
            self.subscription = subscription
        if subscription_item is not None:
            self.subscription_item = subscription_item
        if invoice_item_type is not None:
            self.invoice_item_type = invoice_item_type
        if plan_nickname is not None:
            self.plan_nickname = plan_nickname
        if plan_desc is not None:
            self.plan_desc = plan_desc
        if plan_name is not None:
            self.plan_name = plan_name

    @property
    def item_id(self):
        """Gets the item_id of this InvoiceItemOut.  # noqa: E501


        :return: The item_id of this InvoiceItemOut.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this InvoiceItemOut.


        :param item_id: The item_id of this InvoiceItemOut.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def amount(self):
        """Gets the amount of this InvoiceItemOut.  # noqa: E501


        :return: The amount of this InvoiceItemOut.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InvoiceItemOut.


        :param amount: The amount of this InvoiceItemOut.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this InvoiceItemOut.  # noqa: E501


        :return: The currency of this InvoiceItemOut.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InvoiceItemOut.


        :param currency: The currency of this InvoiceItemOut.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this InvoiceItemOut.  # noqa: E501


        :return: The description of this InvoiceItemOut.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InvoiceItemOut.


        :param description: The description of this InvoiceItemOut.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def quantity(self):
        """Gets the quantity of this InvoiceItemOut.  # noqa: E501


        :return: The quantity of this InvoiceItemOut.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InvoiceItemOut.


        :param quantity: The quantity of this InvoiceItemOut.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def subscription(self):
        """Gets the subscription of this InvoiceItemOut.  # noqa: E501


        :return: The subscription of this InvoiceItemOut.  # noqa: E501
        :rtype: str
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this InvoiceItemOut.


        :param subscription: The subscription of this InvoiceItemOut.  # noqa: E501
        :type: str
        """

        self._subscription = subscription

    @property
    def subscription_item(self):
        """Gets the subscription_item of this InvoiceItemOut.  # noqa: E501


        :return: The subscription_item of this InvoiceItemOut.  # noqa: E501
        :rtype: str
        """
        return self._subscription_item

    @subscription_item.setter
    def subscription_item(self, subscription_item):
        """Sets the subscription_item of this InvoiceItemOut.


        :param subscription_item: The subscription_item of this InvoiceItemOut.  # noqa: E501
        :type: str
        """

        self._subscription_item = subscription_item

    @property
    def invoice_item_type(self):
        """Gets the invoice_item_type of this InvoiceItemOut.  # noqa: E501


        :return: The invoice_item_type of this InvoiceItemOut.  # noqa: E501
        :rtype: str
        """
        return self._invoice_item_type

    @invoice_item_type.setter
    def invoice_item_type(self, invoice_item_type):
        """Sets the invoice_item_type of this InvoiceItemOut.


        :param invoice_item_type: The invoice_item_type of this InvoiceItemOut.  # noqa: E501
        :type: str
        """

        self._invoice_item_type = invoice_item_type

    @property
    def plan_nickname(self):
        """Gets the plan_nickname of this InvoiceItemOut.  # noqa: E501


        :return: The plan_nickname of this InvoiceItemOut.  # noqa: E501
        :rtype: str
        """
        return self._plan_nickname

    @plan_nickname.setter
    def plan_nickname(self, plan_nickname):
        """Sets the plan_nickname of this InvoiceItemOut.


        :param plan_nickname: The plan_nickname of this InvoiceItemOut.  # noqa: E501
        :type: str
        """

        self._plan_nickname = plan_nickname

    @property
    def plan_desc(self):
        """Gets the plan_desc of this InvoiceItemOut.  # noqa: E501


        :return: The plan_desc of this InvoiceItemOut.  # noqa: E501
        :rtype: str
        """
        return self._plan_desc

    @plan_desc.setter
    def plan_desc(self, plan_desc):
        """Sets the plan_desc of this InvoiceItemOut.


        :param plan_desc: The plan_desc of this InvoiceItemOut.  # noqa: E501
        :type: str
        """

        self._plan_desc = plan_desc

    @property
    def plan_name(self):
        """Gets the plan_name of this InvoiceItemOut.  # noqa: E501


        :return: The plan_name of this InvoiceItemOut.  # noqa: E501
        :rtype: str
        """
        return self._plan_name

    @plan_name.setter
    def plan_name(self, plan_name):
        """Sets the plan_name of this InvoiceItemOut.


        :param plan_name: The plan_name of this InvoiceItemOut.  # noqa: E501
        :type: str
        """

        self._plan_name = plan_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceItemOut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
