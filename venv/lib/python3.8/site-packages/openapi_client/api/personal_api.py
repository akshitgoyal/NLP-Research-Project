# coding: utf-8

"""
    NamSor API v2

    NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!   # noqa: E501

    OpenAPI spec version: 2.0.10
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient


class PersonalApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def country(self, personal_name_full, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.country(personal_name_full, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str personal_name_full: (required)
        :return: PersonalNameGeoOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.country_with_http_info(personal_name_full, **kwargs)  # noqa: E501
        else:
            (data) = self.country_with_http_info(personal_name_full, **kwargs)  # noqa: E501
            return data

    def country_with_http_info(self, personal_name_full, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.country_with_http_info(personal_name_full, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str personal_name_full: (required)
        :return: PersonalNameGeoOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['personal_name_full']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method country" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'personal_name_full' is set
        if ('personal_name_full' not in local_var_params or
                local_var_params['personal_name_full'] is None):
            raise ValueError("Missing the required parameter `personal_name_full` when calling `country`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'personal_name_full' in local_var_params:
            path_params['personalNameFull'] = local_var_params['personal_name_full']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/country/{personalNameFull}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonalNameGeoOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def country_batch(self, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.country_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameIn batch_personal_name_in: A list of personal names
        :return: BatchPersonalNameGeoOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.country_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.country_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def country_batch_with_http_info(self, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.country_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameIn batch_personal_name_in: A list of personal names
        :return: BatchPersonalNameGeoOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_personal_name_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method country_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_personal_name_in' in local_var_params:
            body_params = local_var_params['batch_personal_name_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/countryBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchPersonalNameGeoOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def diaspora(self, country_iso2, first_name, last_name, **kwargs):  # noqa: E501
        """[USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.diaspora(country_iso2, first_name, last_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str country_iso2: (required)
        :param str first_name: (required)
        :param str last_name: (required)
        :return: FirstLastNameDiasporaedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.diaspora_with_http_info(country_iso2, first_name, last_name, **kwargs)  # noqa: E501
        else:
            (data) = self.diaspora_with_http_info(country_iso2, first_name, last_name, **kwargs)  # noqa: E501
            return data

    def diaspora_with_http_info(self, country_iso2, first_name, last_name, **kwargs):  # noqa: E501
        """[USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.diaspora_with_http_info(country_iso2, first_name, last_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str country_iso2: (required)
        :param str first_name: (required)
        :param str last_name: (required)
        :return: FirstLastNameDiasporaedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['country_iso2', 'first_name', 'last_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method diaspora" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'country_iso2' is set
        if ('country_iso2' not in local_var_params or
                local_var_params['country_iso2'] is None):
            raise ValueError("Missing the required parameter `country_iso2` when calling `diaspora`")  # noqa: E501
        # verify the required parameter 'first_name' is set
        if ('first_name' not in local_var_params or
                local_var_params['first_name'] is None):
            raise ValueError("Missing the required parameter `first_name` when calling `diaspora`")  # noqa: E501
        # verify the required parameter 'last_name' is set
        if ('last_name' not in local_var_params or
                local_var_params['last_name'] is None):
            raise ValueError("Missing the required parameter `last_name` when calling `diaspora`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'country_iso2' in local_var_params:
            path_params['countryIso2'] = local_var_params['country_iso2']  # noqa: E501
        if 'first_name' in local_var_params:
            path_params['firstName'] = local_var_params['first_name']  # noqa: E501
        if 'last_name' in local_var_params:
            path_params['lastName'] = local_var_params['last_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/diaspora/{countryIso2}/{firstName}/{lastName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirstLastNameDiasporaedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def diaspora_batch(self, **kwargs):  # noqa: E501
        """[USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.diaspora_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameGeoIn batch_first_last_name_geo_in: A list of personal names
        :return: BatchFirstLastNameDiasporaedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.diaspora_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.diaspora_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def diaspora_batch_with_http_info(self, **kwargs):  # noqa: E501
        """[USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.diaspora_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameGeoIn batch_first_last_name_geo_in: A list of personal names
        :return: BatchFirstLastNameDiasporaedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_first_last_name_geo_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method diaspora_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_first_last_name_geo_in' in local_var_params:
            body_params = local_var_params['batch_first_last_name_geo_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/diasporaBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchFirstLastNameDiasporaedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gender(self, first_name, last_name, **kwargs):  # noqa: E501
        """Infer the likely gender of a name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender(first_name, last_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str first_name: (required)
        :param str last_name: (required)
        :return: FirstLastNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gender_with_http_info(first_name, last_name, **kwargs)  # noqa: E501
        else:
            (data) = self.gender_with_http_info(first_name, last_name, **kwargs)  # noqa: E501
            return data

    def gender_with_http_info(self, first_name, last_name, **kwargs):  # noqa: E501
        """Infer the likely gender of a name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_with_http_info(first_name, last_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str first_name: (required)
        :param str last_name: (required)
        :return: FirstLastNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['first_name', 'last_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gender" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'first_name' is set
        if ('first_name' not in local_var_params or
                local_var_params['first_name'] is None):
            raise ValueError("Missing the required parameter `first_name` when calling `gender`")  # noqa: E501
        # verify the required parameter 'last_name' is set
        if ('last_name' not in local_var_params or
                local_var_params['last_name'] is None):
            raise ValueError("Missing the required parameter `last_name` when calling `gender`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'first_name' in local_var_params:
            path_params['firstName'] = local_var_params['first_name']  # noqa: E501
        if 'last_name' in local_var_params:
            path_params['lastName'] = local_var_params['last_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/gender/{firstName}/{lastName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirstLastNameGenderedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gender_batch(self, **kwargs):  # noqa: E501
        """Infer the likely gender of up to 100 names, detecting automatically the cultural context.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameIn batch_first_last_name_in: A list of personal names
        :return: BatchFirstLastNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gender_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.gender_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def gender_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Infer the likely gender of up to 100 names, detecting automatically the cultural context.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameIn batch_first_last_name_in: A list of personal names
        :return: BatchFirstLastNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_first_last_name_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gender_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_first_last_name_in' in local_var_params:
            body_params = local_var_params['batch_first_last_name_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/genderBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchFirstLastNameGenderedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gender_full(self, full_name, **kwargs):  # noqa: E501
        """Infer the likely gender of a full name, ex. John H. Smith  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_full(full_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str full_name: (required)
        :return: PersonalNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gender_full_with_http_info(full_name, **kwargs)  # noqa: E501
        else:
            (data) = self.gender_full_with_http_info(full_name, **kwargs)  # noqa: E501
            return data

    def gender_full_with_http_info(self, full_name, **kwargs):  # noqa: E501
        """Infer the likely gender of a full name, ex. John H. Smith  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_full_with_http_info(full_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str full_name: (required)
        :return: PersonalNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['full_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gender_full" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'full_name' is set
        if ('full_name' not in local_var_params or
                local_var_params['full_name'] is None):
            raise ValueError("Missing the required parameter `full_name` when calling `gender_full`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'full_name' in local_var_params:
            path_params['fullName'] = local_var_params['full_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/genderFull/{fullName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonalNameGenderedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gender_full_batch(self, **kwargs):  # noqa: E501
        """Infer the likely gender of up to 100 full names, detecting automatically the cultural context.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_full_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameIn batch_personal_name_in: A list of personal names
        :return: BatchPersonalNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gender_full_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.gender_full_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def gender_full_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Infer the likely gender of up to 100 full names, detecting automatically the cultural context.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_full_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameIn batch_personal_name_in: A list of personal names
        :return: BatchPersonalNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_personal_name_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gender_full_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_personal_name_in' in local_var_params:
            body_params = local_var_params['batch_personal_name_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/genderFullBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchPersonalNameGenderedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gender_full_geo(self, full_name, country_iso2, **kwargs):  # noqa: E501
        """Infer the likely gender of a full name, given a local context (ISO2 country code).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_full_geo(full_name, country_iso2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str full_name: (required)
        :param str country_iso2: (required)
        :return: PersonalNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gender_full_geo_with_http_info(full_name, country_iso2, **kwargs)  # noqa: E501
        else:
            (data) = self.gender_full_geo_with_http_info(full_name, country_iso2, **kwargs)  # noqa: E501
            return data

    def gender_full_geo_with_http_info(self, full_name, country_iso2, **kwargs):  # noqa: E501
        """Infer the likely gender of a full name, given a local context (ISO2 country code).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_full_geo_with_http_info(full_name, country_iso2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str full_name: (required)
        :param str country_iso2: (required)
        :return: PersonalNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['full_name', 'country_iso2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gender_full_geo" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'full_name' is set
        if ('full_name' not in local_var_params or
                local_var_params['full_name'] is None):
            raise ValueError("Missing the required parameter `full_name` when calling `gender_full_geo`")  # noqa: E501
        # verify the required parameter 'country_iso2' is set
        if ('country_iso2' not in local_var_params or
                local_var_params['country_iso2'] is None):
            raise ValueError("Missing the required parameter `country_iso2` when calling `gender_full_geo`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'full_name' in local_var_params:
            path_params['fullName'] = local_var_params['full_name']  # noqa: E501
        if 'country_iso2' in local_var_params:
            path_params['countryIso2'] = local_var_params['country_iso2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/genderFullGeo/{fullName}/{countryIso2}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonalNameGenderedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gender_full_geo_batch(self, **kwargs):  # noqa: E501
        """Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_full_geo_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameGeoIn batch_personal_name_geo_in: A list of personal names, with a country ISO2 code
        :return: BatchPersonalNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gender_full_geo_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.gender_full_geo_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def gender_full_geo_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_full_geo_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameGeoIn batch_personal_name_geo_in: A list of personal names, with a country ISO2 code
        :return: BatchPersonalNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_personal_name_geo_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gender_full_geo_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_personal_name_geo_in' in local_var_params:
            body_params = local_var_params['batch_personal_name_geo_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/genderFullGeoBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchPersonalNameGenderedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gender_geo(self, first_name, last_name, country_iso2, **kwargs):  # noqa: E501
        """Infer the likely gender of a name, given a local context (ISO2 country code).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_geo(first_name, last_name, country_iso2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str first_name: (required)
        :param str last_name: (required)
        :param str country_iso2: (required)
        :return: FirstLastNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gender_geo_with_http_info(first_name, last_name, country_iso2, **kwargs)  # noqa: E501
        else:
            (data) = self.gender_geo_with_http_info(first_name, last_name, country_iso2, **kwargs)  # noqa: E501
            return data

    def gender_geo_with_http_info(self, first_name, last_name, country_iso2, **kwargs):  # noqa: E501
        """Infer the likely gender of a name, given a local context (ISO2 country code).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_geo_with_http_info(first_name, last_name, country_iso2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str first_name: (required)
        :param str last_name: (required)
        :param str country_iso2: (required)
        :return: FirstLastNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['first_name', 'last_name', 'country_iso2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gender_geo" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'first_name' is set
        if ('first_name' not in local_var_params or
                local_var_params['first_name'] is None):
            raise ValueError("Missing the required parameter `first_name` when calling `gender_geo`")  # noqa: E501
        # verify the required parameter 'last_name' is set
        if ('last_name' not in local_var_params or
                local_var_params['last_name'] is None):
            raise ValueError("Missing the required parameter `last_name` when calling `gender_geo`")  # noqa: E501
        # verify the required parameter 'country_iso2' is set
        if ('country_iso2' not in local_var_params or
                local_var_params['country_iso2'] is None):
            raise ValueError("Missing the required parameter `country_iso2` when calling `gender_geo`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'first_name' in local_var_params:
            path_params['firstName'] = local_var_params['first_name']  # noqa: E501
        if 'last_name' in local_var_params:
            path_params['lastName'] = local_var_params['last_name']  # noqa: E501
        if 'country_iso2' in local_var_params:
            path_params['countryIso2'] = local_var_params['country_iso2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/genderGeo/{firstName}/{lastName}/{countryIso2}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirstLastNameGenderedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gender_geo_batch(self, **kwargs):  # noqa: E501
        """Infer the likely gender of up to 100 names, each given a local context (ISO2 country code).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_geo_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameGeoIn batch_first_last_name_geo_in: A list of names, with country code.
        :return: BatchFirstLastNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gender_geo_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.gender_geo_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def gender_geo_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Infer the likely gender of up to 100 names, each given a local context (ISO2 country code).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_geo_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameGeoIn batch_first_last_name_geo_in: A list of names, with country code.
        :return: BatchFirstLastNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_first_last_name_geo_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gender_geo_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_first_last_name_geo_in' in local_var_params:
            body_params = local_var_params['batch_first_last_name_geo_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/genderGeoBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchFirstLastNameGenderedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def origin(self, first_name, last_name, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use 'diaspora' instead.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.origin(first_name, last_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str first_name: (required)
        :param str last_name: (required)
        :return: FirstLastNameOriginedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.origin_with_http_info(first_name, last_name, **kwargs)  # noqa: E501
        else:
            (data) = self.origin_with_http_info(first_name, last_name, **kwargs)  # noqa: E501
            return data

    def origin_with_http_info(self, first_name, last_name, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use 'diaspora' instead.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.origin_with_http_info(first_name, last_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str first_name: (required)
        :param str last_name: (required)
        :return: FirstLastNameOriginedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['first_name', 'last_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method origin" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'first_name' is set
        if ('first_name' not in local_var_params or
                local_var_params['first_name'] is None):
            raise ValueError("Missing the required parameter `first_name` when calling `origin`")  # noqa: E501
        # verify the required parameter 'last_name' is set
        if ('last_name' not in local_var_params or
                local_var_params['last_name'] is None):
            raise ValueError("Missing the required parameter `last_name` when calling `origin`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'first_name' in local_var_params:
            path_params['firstName'] = local_var_params['first_name']  # noqa: E501
        if 'last_name' in local_var_params:
            path_params['lastName'] = local_var_params['last_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/origin/{firstName}/{lastName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirstLastNameOriginedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def origin_batch(self, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.origin_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameIn batch_first_last_name_in: A list of personal names
        :return: BatchFirstLastNameOriginedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.origin_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.origin_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def origin_batch_with_http_info(self, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.origin_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameIn batch_first_last_name_in: A list of personal names
        :return: BatchFirstLastNameOriginedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_first_last_name_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method origin_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_first_last_name_in' in local_var_params:
            body_params = local_var_params['batch_first_last_name_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/originBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchFirstLastNameOriginedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parse_name(self, name_full, **kwargs):  # noqa: E501
        """Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parse_name(name_full, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name_full: (required)
        :return: PersonalNameParsedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parse_name_with_http_info(name_full, **kwargs)  # noqa: E501
        else:
            (data) = self.parse_name_with_http_info(name_full, **kwargs)  # noqa: E501
            return data

    def parse_name_with_http_info(self, name_full, **kwargs):  # noqa: E501
        """Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parse_name_with_http_info(name_full, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name_full: (required)
        :return: PersonalNameParsedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['name_full']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parse_name" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'name_full' is set
        if ('name_full' not in local_var_params or
                local_var_params['name_full'] is None):
            raise ValueError("Missing the required parameter `name_full` when calling `parse_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name_full' in local_var_params:
            path_params['nameFull'] = local_var_params['name_full']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/parseName/{nameFull}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonalNameParsedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parse_name_batch(self, **kwargs):  # noqa: E501
        """Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parse_name_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameIn batch_personal_name_in: A list of personal names
        :return: BatchPersonalNameParsedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parse_name_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.parse_name_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def parse_name_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parse_name_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameIn batch_personal_name_in: A list of personal names
        :return: BatchPersonalNameParsedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_personal_name_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parse_name_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_personal_name_in' in local_var_params:
            body_params = local_var_params['batch_personal_name_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/parseNameBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchPersonalNameParsedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parse_name_geo(self, name_full, country_iso2, **kwargs):  # noqa: E501
        """Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parse_name_geo(name_full, country_iso2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name_full: (required)
        :param str country_iso2: (required)
        :return: PersonalNameParsedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parse_name_geo_with_http_info(name_full, country_iso2, **kwargs)  # noqa: E501
        else:
            (data) = self.parse_name_geo_with_http_info(name_full, country_iso2, **kwargs)  # noqa: E501
            return data

    def parse_name_geo_with_http_info(self, name_full, country_iso2, **kwargs):  # noqa: E501
        """Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parse_name_geo_with_http_info(name_full, country_iso2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name_full: (required)
        :param str country_iso2: (required)
        :return: PersonalNameParsedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['name_full', 'country_iso2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parse_name_geo" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'name_full' is set
        if ('name_full' not in local_var_params or
                local_var_params['name_full'] is None):
            raise ValueError("Missing the required parameter `name_full` when calling `parse_name_geo`")  # noqa: E501
        # verify the required parameter 'country_iso2' is set
        if ('country_iso2' not in local_var_params or
                local_var_params['country_iso2'] is None):
            raise ValueError("Missing the required parameter `country_iso2` when calling `parse_name_geo`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name_full' in local_var_params:
            path_params['nameFull'] = local_var_params['name_full']  # noqa: E501
        if 'country_iso2' in local_var_params:
            path_params['countryIso2'] = local_var_params['country_iso2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/parseName/{nameFull}/{countryIso2}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonalNameParsedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parse_name_geo_batch(self, **kwargs):  # noqa: E501
        """Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parse_name_geo_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameGeoIn batch_personal_name_geo_in: A list of personal names
        :return: BatchPersonalNameParsedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parse_name_geo_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.parse_name_geo_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def parse_name_geo_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision.   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parse_name_geo_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameGeoIn batch_personal_name_geo_in: A list of personal names
        :return: BatchPersonalNameParsedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_personal_name_geo_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parse_name_geo_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_personal_name_geo_in' in local_var_params:
            body_params = local_var_params['batch_personal_name_geo_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/parseNameGeoBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchPersonalNameParsedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parsed_gender_batch(self, **kwargs):  # noqa: E501
        """Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parsed_gender_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchParsedFullNameIn batch_parsed_full_name_in: A list of personal names
        :return: BatchFirstLastNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parsed_gender_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.parsed_gender_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def parsed_gender_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parsed_gender_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchParsedFullNameIn batch_parsed_full_name_in: A list of personal names
        :return: BatchFirstLastNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_parsed_full_name_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parsed_gender_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_parsed_full_name_in' in local_var_params:
            body_params = local_var_params['batch_parsed_full_name_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/parsedGenderBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchFirstLastNameGenderedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parsed_gender_geo_batch(self, **kwargs):  # noqa: E501
        """Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parsed_gender_geo_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchParsedFullNameGeoIn batch_parsed_full_name_geo_in: A list of personal names
        :return: BatchFirstLastNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parsed_gender_geo_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.parsed_gender_geo_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def parsed_gender_geo_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Infer the likely gender of up to 100 fully parsed names, detecting automatically the cultural context.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parsed_gender_geo_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchParsedFullNameGeoIn batch_parsed_full_name_geo_in: A list of personal names
        :return: BatchFirstLastNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_parsed_full_name_geo_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parsed_gender_geo_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_parsed_full_name_geo_in' in local_var_params:
            body_params = local_var_params['batch_parsed_full_name_geo_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/parsedGenderGeoBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchFirstLastNameGenderedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def us_race_ethnicity(self, first_name, last_name, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.us_race_ethnicity(first_name, last_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str first_name: (required)
        :param str last_name: (required)
        :return: FirstLastNameUSRaceEthnicityOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.us_race_ethnicity_with_http_info(first_name, last_name, **kwargs)  # noqa: E501
        else:
            (data) = self.us_race_ethnicity_with_http_info(first_name, last_name, **kwargs)  # noqa: E501
            return data

    def us_race_ethnicity_with_http_info(self, first_name, last_name, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.us_race_ethnicity_with_http_info(first_name, last_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str first_name: (required)
        :param str last_name: (required)
        :return: FirstLastNameUSRaceEthnicityOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['first_name', 'last_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method us_race_ethnicity" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'first_name' is set
        if ('first_name' not in local_var_params or
                local_var_params['first_name'] is None):
            raise ValueError("Missing the required parameter `first_name` when calling `us_race_ethnicity`")  # noqa: E501
        # verify the required parameter 'last_name' is set
        if ('last_name' not in local_var_params or
                local_var_params['last_name'] is None):
            raise ValueError("Missing the required parameter `last_name` when calling `us_race_ethnicity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'first_name' in local_var_params:
            path_params['firstName'] = local_var_params['first_name']  # noqa: E501
        if 'last_name' in local_var_params:
            path_params['lastName'] = local_var_params['last_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/usRaceEthnicity/{firstName}/{lastName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirstLastNameUSRaceEthnicityOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def us_race_ethnicity_batch(self, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.us_race_ethnicity_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameGeoIn batch_first_last_name_geo_in: A list of personal names
        :return: BatchFirstLastNameUSRaceEthnicityOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.us_race_ethnicity_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.us_race_ethnicity_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def us_race_ethnicity_batch_with_http_info(self, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.us_race_ethnicity_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameGeoIn batch_first_last_name_geo_in: A list of personal names
        :return: BatchFirstLastNameUSRaceEthnicityOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_first_last_name_geo_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method us_race_ethnicity_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_first_last_name_geo_in' in local_var_params:
            body_params = local_var_params['batch_first_last_name_geo_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/usRaceEthnicityBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchFirstLastNameUSRaceEthnicityOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def us_race_ethnicity_zip5(self, first_name, last_name, zip5_code, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.us_race_ethnicity_zip5(first_name, last_name, zip5_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str first_name: (required)
        :param str last_name: (required)
        :param str zip5_code: (required)
        :return: FirstLastNameUSRaceEthnicityOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.us_race_ethnicity_zip5_with_http_info(first_name, last_name, zip5_code, **kwargs)  # noqa: E501
        else:
            (data) = self.us_race_ethnicity_zip5_with_http_info(first_name, last_name, zip5_code, **kwargs)  # noqa: E501
            return data

    def us_race_ethnicity_zip5_with_http_info(self, first_name, last_name, zip5_code, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.us_race_ethnicity_zip5_with_http_info(first_name, last_name, zip5_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str first_name: (required)
        :param str last_name: (required)
        :param str zip5_code: (required)
        :return: FirstLastNameUSRaceEthnicityOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['first_name', 'last_name', 'zip5_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method us_race_ethnicity_zip5" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'first_name' is set
        if ('first_name' not in local_var_params or
                local_var_params['first_name'] is None):
            raise ValueError("Missing the required parameter `first_name` when calling `us_race_ethnicity_zip5`")  # noqa: E501
        # verify the required parameter 'last_name' is set
        if ('last_name' not in local_var_params or
                local_var_params['last_name'] is None):
            raise ValueError("Missing the required parameter `last_name` when calling `us_race_ethnicity_zip5`")  # noqa: E501
        # verify the required parameter 'zip5_code' is set
        if ('zip5_code' not in local_var_params or
                local_var_params['zip5_code'] is None):
            raise ValueError("Missing the required parameter `zip5_code` when calling `us_race_ethnicity_zip5`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'first_name' in local_var_params:
            path_params['firstName'] = local_var_params['first_name']  # noqa: E501
        if 'last_name' in local_var_params:
            path_params['lastName'] = local_var_params['last_name']  # noqa: E501
        if 'zip5_code' in local_var_params:
            path_params['zip5Code'] = local_var_params['zip5_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/usRaceEthnicityZIP5/{firstName}/{lastName}/{zip5Code}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirstLastNameUSRaceEthnicityOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def us_zip_race_ethnicity_batch(self, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.us_zip_race_ethnicity_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameGeoZippedIn batch_first_last_name_geo_zipped_in: A list of personal names
        :return: BatchFirstLastNameUSRaceEthnicityOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.us_zip_race_ethnicity_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.us_zip_race_ethnicity_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def us_zip_race_ethnicity_batch_with_http_info(self, **kwargs):  # noqa: E501
        """[USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.us_zip_race_ethnicity_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameGeoZippedIn batch_first_last_name_geo_zipped_in: A list of personal names
        :return: BatchFirstLastNameUSRaceEthnicityOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_first_last_name_geo_zipped_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method us_zip_race_ethnicity_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_first_last_name_geo_zipped_in' in local_var_params:
            body_params = local_var_params['batch_first_last_name_geo_zipped_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/usZipRaceEthnicityBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchFirstLastNameUSRaceEthnicityOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
