# coding: utf-8

"""
    NamSor API v2

    NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!   # noqa: E501

    OpenAPI spec version: 2.0.10
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient


class ChineseApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def chinese_name_candidates(self, chinese_surname_latin, chinese_given_name_latin, **kwargs):  # noqa: E501
        """Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chinese_name_candidates(chinese_surname_latin, chinese_given_name_latin, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chinese_surname_latin: (required)
        :param str chinese_given_name_latin: (required)
        :return: RomanizedNameOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chinese_name_candidates_with_http_info(chinese_surname_latin, chinese_given_name_latin, **kwargs)  # noqa: E501
        else:
            (data) = self.chinese_name_candidates_with_http_info(chinese_surname_latin, chinese_given_name_latin, **kwargs)  # noqa: E501
            return data

    def chinese_name_candidates_with_http_info(self, chinese_surname_latin, chinese_given_name_latin, **kwargs):  # noqa: E501
        """Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chinese_name_candidates_with_http_info(chinese_surname_latin, chinese_given_name_latin, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chinese_surname_latin: (required)
        :param str chinese_given_name_latin: (required)
        :return: RomanizedNameOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['chinese_surname_latin', 'chinese_given_name_latin']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chinese_name_candidates" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'chinese_surname_latin' is set
        if ('chinese_surname_latin' not in local_var_params or
                local_var_params['chinese_surname_latin'] is None):
            raise ValueError("Missing the required parameter `chinese_surname_latin` when calling `chinese_name_candidates`")  # noqa: E501
        # verify the required parameter 'chinese_given_name_latin' is set
        if ('chinese_given_name_latin' not in local_var_params or
                local_var_params['chinese_given_name_latin'] is None):
            raise ValueError("Missing the required parameter `chinese_given_name_latin` when calling `chinese_name_candidates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chinese_surname_latin' in local_var_params:
            path_params['chineseSurnameLatin'] = local_var_params['chinese_surname_latin']  # noqa: E501
        if 'chinese_given_name_latin' in local_var_params:
            path_params['chineseGivenNameLatin'] = local_var_params['chinese_given_name_latin']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/chineseNameCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RomanizedNameOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chinese_name_candidates_batch(self, **kwargs):  # noqa: E501
        """Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chinese_name_candidates_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameIn batch_first_last_name_in: A list of personal Chinese names in LATIN, firstName = chineseGivenName; lastName=chineseSurname
        :return: BatchNameMatchCandidatesOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chinese_name_candidates_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.chinese_name_candidates_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def chinese_name_candidates_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chinese_name_candidates_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameIn batch_first_last_name_in: A list of personal Chinese names in LATIN, firstName = chineseGivenName; lastName=chineseSurname
        :return: BatchNameMatchCandidatesOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_first_last_name_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chinese_name_candidates_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_first_last_name_in' in local_var_params:
            body_params = local_var_params['batch_first_last_name_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/chineseNameCandidatesBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchNameMatchCandidatesOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chinese_name_candidates_gender_batch(self, **kwargs):  # noqa: E501
        """Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname) ex. Wang Xiaoming.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chinese_name_candidates_gender_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameIn batch_first_last_name_in: A list of personal Chinese names in LATIN, firstName = chineseGivenName; lastName=chineseSurname
        :return: BatchNameMatchCandidatesOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chinese_name_candidates_gender_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.chinese_name_candidates_gender_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def chinese_name_candidates_gender_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname) ex. Wang Xiaoming.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chinese_name_candidates_gender_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameIn batch_first_last_name_in: A list of personal Chinese names in LATIN, firstName = chineseGivenName; lastName=chineseSurname
        :return: BatchNameMatchCandidatesOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_first_last_name_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chinese_name_candidates_gender_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_first_last_name_in' in local_var_params:
            body_params = local_var_params['batch_first_last_name_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/chineseNameCandidatesGenderBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchNameMatchCandidatesOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chinese_name_gender_candidates(self, chinese_surname_latin, chinese_given_name_latin, known_gender, **kwargs):  # noqa: E501
        """Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender ('male' or 'female')  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chinese_name_gender_candidates(chinese_surname_latin, chinese_given_name_latin, known_gender, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chinese_surname_latin: (required)
        :param str chinese_given_name_latin: (required)
        :param str known_gender: (required)
        :return: RomanizedNameOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chinese_name_gender_candidates_with_http_info(chinese_surname_latin, chinese_given_name_latin, known_gender, **kwargs)  # noqa: E501
        else:
            (data) = self.chinese_name_gender_candidates_with_http_info(chinese_surname_latin, chinese_given_name_latin, known_gender, **kwargs)  # noqa: E501
            return data

    def chinese_name_gender_candidates_with_http_info(self, chinese_surname_latin, chinese_given_name_latin, known_gender, **kwargs):  # noqa: E501
        """Identify Chinese name candidates, based on the romanized name ex. Wang Xiaoming - having a known gender ('male' or 'female')  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chinese_name_gender_candidates_with_http_info(chinese_surname_latin, chinese_given_name_latin, known_gender, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chinese_surname_latin: (required)
        :param str chinese_given_name_latin: (required)
        :param str known_gender: (required)
        :return: RomanizedNameOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['chinese_surname_latin', 'chinese_given_name_latin', 'known_gender']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chinese_name_gender_candidates" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'chinese_surname_latin' is set
        if ('chinese_surname_latin' not in local_var_params or
                local_var_params['chinese_surname_latin'] is None):
            raise ValueError("Missing the required parameter `chinese_surname_latin` when calling `chinese_name_gender_candidates`")  # noqa: E501
        # verify the required parameter 'chinese_given_name_latin' is set
        if ('chinese_given_name_latin' not in local_var_params or
                local_var_params['chinese_given_name_latin'] is None):
            raise ValueError("Missing the required parameter `chinese_given_name_latin` when calling `chinese_name_gender_candidates`")  # noqa: E501
        # verify the required parameter 'known_gender' is set
        if ('known_gender' not in local_var_params or
                local_var_params['known_gender'] is None):
            raise ValueError("Missing the required parameter `known_gender` when calling `chinese_name_gender_candidates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chinese_surname_latin' in local_var_params:
            path_params['chineseSurnameLatin'] = local_var_params['chinese_surname_latin']  # noqa: E501
        if 'chinese_given_name_latin' in local_var_params:
            path_params['chineseGivenNameLatin'] = local_var_params['chinese_given_name_latin']  # noqa: E501
        if 'known_gender' in local_var_params:
            path_params['knownGender'] = local_var_params['known_gender']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/chineseNameGenderCandidates/{chineseSurnameLatin}/{chineseGivenNameLatin}/{knownGender}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RomanizedNameOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chinese_name_match(self, chinese_surname_latin, chinese_given_name_latin, chinese_name, **kwargs):  # noqa: E501
        """Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chinese_name_match(chinese_surname_latin, chinese_given_name_latin, chinese_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chinese_surname_latin: (required)
        :param str chinese_given_name_latin: (required)
        :param str chinese_name: (required)
        :return: RomanizedNameOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chinese_name_match_with_http_info(chinese_surname_latin, chinese_given_name_latin, chinese_name, **kwargs)  # noqa: E501
        else:
            (data) = self.chinese_name_match_with_http_info(chinese_surname_latin, chinese_given_name_latin, chinese_name, **kwargs)  # noqa: E501
            return data

    def chinese_name_match_with_http_info(self, chinese_surname_latin, chinese_given_name_latin, chinese_name, **kwargs):  # noqa: E501
        """Return a score for matching Chinese name ex. 王晓明 with a romanized name ex. Wang Xiaoming  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chinese_name_match_with_http_info(chinese_surname_latin, chinese_given_name_latin, chinese_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chinese_surname_latin: (required)
        :param str chinese_given_name_latin: (required)
        :param str chinese_name: (required)
        :return: RomanizedNameOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['chinese_surname_latin', 'chinese_given_name_latin', 'chinese_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chinese_name_match" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'chinese_surname_latin' is set
        if ('chinese_surname_latin' not in local_var_params or
                local_var_params['chinese_surname_latin'] is None):
            raise ValueError("Missing the required parameter `chinese_surname_latin` when calling `chinese_name_match`")  # noqa: E501
        # verify the required parameter 'chinese_given_name_latin' is set
        if ('chinese_given_name_latin' not in local_var_params or
                local_var_params['chinese_given_name_latin'] is None):
            raise ValueError("Missing the required parameter `chinese_given_name_latin` when calling `chinese_name_match`")  # noqa: E501
        # verify the required parameter 'chinese_name' is set
        if ('chinese_name' not in local_var_params or
                local_var_params['chinese_name'] is None):
            raise ValueError("Missing the required parameter `chinese_name` when calling `chinese_name_match`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chinese_surname_latin' in local_var_params:
            path_params['chineseSurnameLatin'] = local_var_params['chinese_surname_latin']  # noqa: E501
        if 'chinese_given_name_latin' in local_var_params:
            path_params['chineseGivenNameLatin'] = local_var_params['chinese_given_name_latin']  # noqa: E501
        if 'chinese_name' in local_var_params:
            path_params['chineseName'] = local_var_params['chinese_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/chineseNameMatch/{chineseSurnameLatin}/{chineseGivenNameLatin}/{chineseName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RomanizedNameOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def chinese_name_match_batch(self, **kwargs):  # noqa: E501
        """Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chinese_name_match_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameIn batch_first_last_name_in: A list of personal Chinese names in LATIN, firstName = chineseGivenName; lastName=chineseSurname
        :return: BatchNameMatchCandidatesOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.chinese_name_match_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.chinese_name_match_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def chinese_name_match_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Identify Chinese name candidates, based on the romanized name (firstName = chineseGivenName; lastName=chineseSurname), ex. Wang Xiaoming  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.chinese_name_match_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameIn batch_first_last_name_in: A list of personal Chinese names in LATIN, firstName = chineseGivenName; lastName=chineseSurname
        :return: BatchNameMatchCandidatesOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_first_last_name_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method chinese_name_match_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_first_last_name_in' in local_var_params:
            body_params = local_var_params['batch_first_last_name_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/chineseNameMatchBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchNameMatchCandidatesOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gender_chinese_name(self, chinese_name, **kwargs):  # noqa: E501
        """Infer the likely gender of a Chinese full name ex. 王晓明  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_chinese_name(chinese_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chinese_name: (required)
        :return: PersonalNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gender_chinese_name_with_http_info(chinese_name, **kwargs)  # noqa: E501
        else:
            (data) = self.gender_chinese_name_with_http_info(chinese_name, **kwargs)  # noqa: E501
            return data

    def gender_chinese_name_with_http_info(self, chinese_name, **kwargs):  # noqa: E501
        """Infer the likely gender of a Chinese full name ex. 王晓明  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_chinese_name_with_http_info(chinese_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chinese_name: (required)
        :return: PersonalNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['chinese_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gender_chinese_name" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'chinese_name' is set
        if ('chinese_name' not in local_var_params or
                local_var_params['chinese_name'] is None):
            raise ValueError("Missing the required parameter `chinese_name` when calling `gender_chinese_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chinese_name' in local_var_params:
            path_params['chineseName'] = local_var_params['chinese_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/genderChineseName/{chineseName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonalNameGenderedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gender_chinese_name_batch(self, **kwargs):  # noqa: E501
        """Infer the likely gender of up to 100 full names ex. 王晓明  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_chinese_name_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameIn batch_personal_name_in: A list of personal names, with a country ISO2 code
        :return: BatchPersonalNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gender_chinese_name_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.gender_chinese_name_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def gender_chinese_name_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Infer the likely gender of up to 100 full names ex. 王晓明  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_chinese_name_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameIn batch_personal_name_in: A list of personal names, with a country ISO2 code
        :return: BatchPersonalNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_personal_name_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gender_chinese_name_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_personal_name_in' in local_var_params:
            body_params = local_var_params['batch_personal_name_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/genderChineseNameBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchPersonalNameGenderedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gender_chinese_name_pinyin(self, chinese_surname_latin, chinese_given_name_latin, **kwargs):  # noqa: E501
        """Infer the likely gender of a Chinese name in LATIN (Pinyin).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_chinese_name_pinyin(chinese_surname_latin, chinese_given_name_latin, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chinese_surname_latin: (required)
        :param str chinese_given_name_latin: (required)
        :return: FirstLastNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gender_chinese_name_pinyin_with_http_info(chinese_surname_latin, chinese_given_name_latin, **kwargs)  # noqa: E501
        else:
            (data) = self.gender_chinese_name_pinyin_with_http_info(chinese_surname_latin, chinese_given_name_latin, **kwargs)  # noqa: E501
            return data

    def gender_chinese_name_pinyin_with_http_info(self, chinese_surname_latin, chinese_given_name_latin, **kwargs):  # noqa: E501
        """Infer the likely gender of a Chinese name in LATIN (Pinyin).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_chinese_name_pinyin_with_http_info(chinese_surname_latin, chinese_given_name_latin, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chinese_surname_latin: (required)
        :param str chinese_given_name_latin: (required)
        :return: FirstLastNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['chinese_surname_latin', 'chinese_given_name_latin']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gender_chinese_name_pinyin" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'chinese_surname_latin' is set
        if ('chinese_surname_latin' not in local_var_params or
                local_var_params['chinese_surname_latin'] is None):
            raise ValueError("Missing the required parameter `chinese_surname_latin` when calling `gender_chinese_name_pinyin`")  # noqa: E501
        # verify the required parameter 'chinese_given_name_latin' is set
        if ('chinese_given_name_latin' not in local_var_params or
                local_var_params['chinese_given_name_latin'] is None):
            raise ValueError("Missing the required parameter `chinese_given_name_latin` when calling `gender_chinese_name_pinyin`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chinese_surname_latin' in local_var_params:
            path_params['chineseSurnameLatin'] = local_var_params['chinese_surname_latin']  # noqa: E501
        if 'chinese_given_name_latin' in local_var_params:
            path_params['chineseGivenNameLatin'] = local_var_params['chinese_given_name_latin']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/genderChineseNamePinyin/{chineseSurnameLatin}/{chineseGivenNameLatin}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirstLastNameGenderedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gender_chinese_name_pinyin_batch(self, **kwargs):  # noqa: E501
        """Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_chinese_name_pinyin_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameIn batch_first_last_name_in: A list of names, with country code.
        :return: BatchFirstLastNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gender_chinese_name_pinyin_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.gender_chinese_name_pinyin_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def gender_chinese_name_pinyin_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Infer the likely gender of up to 100 Chinese names in LATIN (Pinyin).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_chinese_name_pinyin_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameIn batch_first_last_name_in: A list of names, with country code.
        :return: BatchFirstLastNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_first_last_name_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gender_chinese_name_pinyin_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_first_last_name_in' in local_var_params:
            body_params = local_var_params['batch_first_last_name_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/genderChineseNamePinyinBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchFirstLastNameGenderedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parse_chinese_name(self, chinese_name, **kwargs):  # noqa: E501
        """Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parse_chinese_name(chinese_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chinese_name: (required)
        :return: PersonalNameParsedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parse_chinese_name_with_http_info(chinese_name, **kwargs)  # noqa: E501
        else:
            (data) = self.parse_chinese_name_with_http_info(chinese_name, **kwargs)  # noqa: E501
            return data

    def parse_chinese_name_with_http_info(self, chinese_name, **kwargs):  # noqa: E501
        """Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parse_chinese_name_with_http_info(chinese_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chinese_name: (required)
        :return: PersonalNameParsedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['chinese_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parse_chinese_name" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'chinese_name' is set
        if ('chinese_name' not in local_var_params or
                local_var_params['chinese_name'] is None):
            raise ValueError("Missing the required parameter `chinese_name` when calling `parse_chinese_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chinese_name' in local_var_params:
            path_params['chineseName'] = local_var_params['chinese_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/parseChineseName/{chineseName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonalNameParsedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parse_chinese_name_batch(self, **kwargs):  # noqa: E501
        """Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parse_chinese_name_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameIn batch_personal_name_in: A list of personal names
        :return: BatchPersonalNameParsedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parse_chinese_name_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.parse_chinese_name_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def parse_chinese_name_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Infer the likely first/last name structure of a name, ex. 王晓明 -> 王(surname) 晓明(given name).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parse_chinese_name_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameIn batch_personal_name_in: A list of personal names
        :return: BatchPersonalNameParsedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_personal_name_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parse_chinese_name_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_personal_name_in' in local_var_params:
            body_params = local_var_params['batch_personal_name_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/parseChineseNameBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchPersonalNameParsedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pinyin_chinese_name(self, chinese_name, **kwargs):  # noqa: E501
        """Romanize the Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pinyin_chinese_name(chinese_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chinese_name: (required)
        :return: PersonalNameParsedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pinyin_chinese_name_with_http_info(chinese_name, **kwargs)  # noqa: E501
        else:
            (data) = self.pinyin_chinese_name_with_http_info(chinese_name, **kwargs)  # noqa: E501
            return data

    def pinyin_chinese_name_with_http_info(self, chinese_name, **kwargs):  # noqa: E501
        """Romanize the Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pinyin_chinese_name_with_http_info(chinese_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chinese_name: (required)
        :return: PersonalNameParsedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['chinese_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pinyin_chinese_name" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'chinese_name' is set
        if ('chinese_name' not in local_var_params or
                local_var_params['chinese_name'] is None):
            raise ValueError("Missing the required parameter `chinese_name` when calling `pinyin_chinese_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chinese_name' in local_var_params:
            path_params['chineseName'] = local_var_params['chinese_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/pinyinChineseName/{chineseName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonalNameParsedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pinyin_chinese_name_batch(self, **kwargs):  # noqa: E501
        """Romanize a list of Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pinyin_chinese_name_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameIn batch_personal_name_in: A list of Chinese names
        :return: BatchPersonalNameParsedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pinyin_chinese_name_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.pinyin_chinese_name_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def pinyin_chinese_name_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Romanize a list of Chinese name to Pinyin, ex. 王晓明 -> Wang (surname) Xiaoming (given name).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pinyin_chinese_name_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameIn batch_personal_name_in: A list of Chinese names
        :return: BatchPersonalNameParsedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_personal_name_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pinyin_chinese_name_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_personal_name_in' in local_var_params:
            body_params = local_var_params['batch_personal_name_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/pinyinChineseNameBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchPersonalNameParsedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
