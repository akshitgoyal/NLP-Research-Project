# coding: utf-8

"""
    NamSor API v2

    NamSor API v2 : enpoints to process personal names (gender, cultural origin or ethnicity) in all alphabets or languages. Use GET methods for small tests, but prefer POST methods for higher throughput (batch processing of up to 100 names at a time). Need something you can't find here? We have many more features coming soon. Let us know, we'll do our best to add it!   # noqa: E501

    OpenAPI spec version: 2.0.10
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient


class JapaneseApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def gender_japanese_name_full(self, japanese_name, **kwargs):  # noqa: E501
        """Infer the likely gender of a Japanese full name ex. 王晓明  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_japanese_name_full(japanese_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str japanese_name: (required)
        :return: PersonalNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gender_japanese_name_full_with_http_info(japanese_name, **kwargs)  # noqa: E501
        else:
            (data) = self.gender_japanese_name_full_with_http_info(japanese_name, **kwargs)  # noqa: E501
            return data

    def gender_japanese_name_full_with_http_info(self, japanese_name, **kwargs):  # noqa: E501
        """Infer the likely gender of a Japanese full name ex. 王晓明  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_japanese_name_full_with_http_info(japanese_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str japanese_name: (required)
        :return: PersonalNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['japanese_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gender_japanese_name_full" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'japanese_name' is set
        if ('japanese_name' not in local_var_params or
                local_var_params['japanese_name'] is None):
            raise ValueError("Missing the required parameter `japanese_name` when calling `gender_japanese_name_full`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'japanese_name' in local_var_params:
            path_params['japaneseName'] = local_var_params['japanese_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/genderJapaneseNameFull/{japaneseName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonalNameGenderedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gender_japanese_name_full_batch(self, **kwargs):  # noqa: E501
        """Infer the likely gender of up to 100 full names  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_japanese_name_full_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameIn batch_personal_name_in: A list of personal names
        :return: BatchPersonalNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gender_japanese_name_full_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.gender_japanese_name_full_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def gender_japanese_name_full_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Infer the likely gender of up to 100 full names  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_japanese_name_full_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameIn batch_personal_name_in: A list of personal names
        :return: BatchPersonalNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_personal_name_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gender_japanese_name_full_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_personal_name_in' in local_var_params:
            body_params = local_var_params['batch_personal_name_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/genderJapaneseNameFullBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchPersonalNameGenderedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gender_japanese_name_pinyin(self, japanese_surname, japanese_given_name, **kwargs):  # noqa: E501
        """Infer the likely gender of a Japanese name in LATIN (Pinyin).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_japanese_name_pinyin(japanese_surname, japanese_given_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str japanese_surname: (required)
        :param str japanese_given_name: (required)
        :return: FirstLastNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gender_japanese_name_pinyin_with_http_info(japanese_surname, japanese_given_name, **kwargs)  # noqa: E501
        else:
            (data) = self.gender_japanese_name_pinyin_with_http_info(japanese_surname, japanese_given_name, **kwargs)  # noqa: E501
            return data

    def gender_japanese_name_pinyin_with_http_info(self, japanese_surname, japanese_given_name, **kwargs):  # noqa: E501
        """Infer the likely gender of a Japanese name in LATIN (Pinyin).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_japanese_name_pinyin_with_http_info(japanese_surname, japanese_given_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str japanese_surname: (required)
        :param str japanese_given_name: (required)
        :return: FirstLastNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['japanese_surname', 'japanese_given_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gender_japanese_name_pinyin" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'japanese_surname' is set
        if ('japanese_surname' not in local_var_params or
                local_var_params['japanese_surname'] is None):
            raise ValueError("Missing the required parameter `japanese_surname` when calling `gender_japanese_name_pinyin`")  # noqa: E501
        # verify the required parameter 'japanese_given_name' is set
        if ('japanese_given_name' not in local_var_params or
                local_var_params['japanese_given_name'] is None):
            raise ValueError("Missing the required parameter `japanese_given_name` when calling `gender_japanese_name_pinyin`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'japanese_surname' in local_var_params:
            path_params['japaneseSurname'] = local_var_params['japanese_surname']  # noqa: E501
        if 'japanese_given_name' in local_var_params:
            path_params['japaneseGivenName'] = local_var_params['japanese_given_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/genderJapaneseName/{japaneseSurname}/{japaneseGivenName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FirstLastNameGenderedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def gender_japanese_name_pinyin_batch(self, **kwargs):  # noqa: E501
        """Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_japanese_name_pinyin_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameIn batch_first_last_name_in: A list of names, with country code.
        :return: BatchFirstLastNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.gender_japanese_name_pinyin_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.gender_japanese_name_pinyin_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def gender_japanese_name_pinyin_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Infer the likely gender of up to 100 Japanese names in LATIN (Pinyin).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.gender_japanese_name_pinyin_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameIn batch_first_last_name_in: A list of names, with country code.
        :return: BatchFirstLastNameGenderedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_first_last_name_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gender_japanese_name_pinyin_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_first_last_name_in' in local_var_params:
            body_params = local_var_params['batch_first_last_name_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/genderJapaneseNameBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchFirstLastNameGenderedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def japanese_name_kanji_candidates(self, japanese_surname_latin, japanese_given_name_latin, **kwargs):  # noqa: E501
        """Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.japanese_name_kanji_candidates(japanese_surname_latin, japanese_given_name_latin, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str japanese_surname_latin: (required)
        :param str japanese_given_name_latin: (required)
        :return: RomanizedNameOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.japanese_name_kanji_candidates_with_http_info(japanese_surname_latin, japanese_given_name_latin, **kwargs)  # noqa: E501
        else:
            (data) = self.japanese_name_kanji_candidates_with_http_info(japanese_surname_latin, japanese_given_name_latin, **kwargs)  # noqa: E501
            return data

    def japanese_name_kanji_candidates_with_http_info(self, japanese_surname_latin, japanese_given_name_latin, **kwargs):  # noqa: E501
        """Identify japanese name candidates in KANJI, based on the romanized name ex. Yamamoto Sanae  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.japanese_name_kanji_candidates_with_http_info(japanese_surname_latin, japanese_given_name_latin, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str japanese_surname_latin: (required)
        :param str japanese_given_name_latin: (required)
        :return: RomanizedNameOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['japanese_surname_latin', 'japanese_given_name_latin']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method japanese_name_kanji_candidates" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'japanese_surname_latin' is set
        if ('japanese_surname_latin' not in local_var_params or
                local_var_params['japanese_surname_latin'] is None):
            raise ValueError("Missing the required parameter `japanese_surname_latin` when calling `japanese_name_kanji_candidates`")  # noqa: E501
        # verify the required parameter 'japanese_given_name_latin' is set
        if ('japanese_given_name_latin' not in local_var_params or
                local_var_params['japanese_given_name_latin'] is None):
            raise ValueError("Missing the required parameter `japanese_given_name_latin` when calling `japanese_name_kanji_candidates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'japanese_surname_latin' in local_var_params:
            path_params['japaneseSurnameLatin'] = local_var_params['japanese_surname_latin']  # noqa: E501
        if 'japanese_given_name_latin' in local_var_params:
            path_params['japaneseGivenNameLatin'] = local_var_params['japanese_given_name_latin']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/japaneseNameKanjiCandidates/{japaneseSurnameLatin}/{japaneseGivenNameLatin}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RomanizedNameOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def japanese_name_kanji_candidates_batch(self, **kwargs):  # noqa: E501
        """Identify japanese name candidates in KANJI, based on the romanized name (firstName = japaneseGivenName; lastName=japaneseSurname), ex. Yamamoto Sanae  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.japanese_name_kanji_candidates_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameIn batch_first_last_name_in: A list of personal japanese names in LATIN, firstName = japaneseGivenName; lastName=japaneseSurname
        :return: BatchNameMatchCandidatesOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.japanese_name_kanji_candidates_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.japanese_name_kanji_candidates_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def japanese_name_kanji_candidates_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Identify japanese name candidates in KANJI, based on the romanized name (firstName = japaneseGivenName; lastName=japaneseSurname), ex. Yamamoto Sanae  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.japanese_name_kanji_candidates_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameIn batch_first_last_name_in: A list of personal japanese names in LATIN, firstName = japaneseGivenName; lastName=japaneseSurname
        :return: BatchNameMatchCandidatesOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_first_last_name_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method japanese_name_kanji_candidates_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_first_last_name_in' in local_var_params:
            body_params = local_var_params['batch_first_last_name_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/japaneseNameKanjiCandidatesBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchNameMatchCandidatesOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def japanese_name_latin_candidates(self, japanese_surname_kanji, japanese_given_name_kanji, **kwargs):  # noqa: E501
        """Romanize japanese name, based on the name in Kanji.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.japanese_name_latin_candidates(japanese_surname_kanji, japanese_given_name_kanji, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str japanese_surname_kanji: (required)
        :param str japanese_given_name_kanji: (required)
        :return: RomanizedNameOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.japanese_name_latin_candidates_with_http_info(japanese_surname_kanji, japanese_given_name_kanji, **kwargs)  # noqa: E501
        else:
            (data) = self.japanese_name_latin_candidates_with_http_info(japanese_surname_kanji, japanese_given_name_kanji, **kwargs)  # noqa: E501
            return data

    def japanese_name_latin_candidates_with_http_info(self, japanese_surname_kanji, japanese_given_name_kanji, **kwargs):  # noqa: E501
        """Romanize japanese name, based on the name in Kanji.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.japanese_name_latin_candidates_with_http_info(japanese_surname_kanji, japanese_given_name_kanji, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str japanese_surname_kanji: (required)
        :param str japanese_given_name_kanji: (required)
        :return: RomanizedNameOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['japanese_surname_kanji', 'japanese_given_name_kanji']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method japanese_name_latin_candidates" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'japanese_surname_kanji' is set
        if ('japanese_surname_kanji' not in local_var_params or
                local_var_params['japanese_surname_kanji'] is None):
            raise ValueError("Missing the required parameter `japanese_surname_kanji` when calling `japanese_name_latin_candidates`")  # noqa: E501
        # verify the required parameter 'japanese_given_name_kanji' is set
        if ('japanese_given_name_kanji' not in local_var_params or
                local_var_params['japanese_given_name_kanji'] is None):
            raise ValueError("Missing the required parameter `japanese_given_name_kanji` when calling `japanese_name_latin_candidates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'japanese_surname_kanji' in local_var_params:
            path_params['japaneseSurnameKanji'] = local_var_params['japanese_surname_kanji']  # noqa: E501
        if 'japanese_given_name_kanji' in local_var_params:
            path_params['japaneseGivenNameKanji'] = local_var_params['japanese_given_name_kanji']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/japaneseNameLatinCandidates/{japaneseSurnameKanji}/{japaneseGivenNameKanji}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RomanizedNameOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def japanese_name_latin_candidates_batch(self, **kwargs):  # noqa: E501
        """Romanize japanese names, based on the name in KANJI  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.japanese_name_latin_candidates_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameIn batch_first_last_name_in: A list of personal japanese names in KANJI, firstName = japaneseGivenName; lastName=japaneseSurname
        :return: BatchNameMatchCandidatesOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.japanese_name_latin_candidates_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.japanese_name_latin_candidates_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def japanese_name_latin_candidates_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Romanize japanese names, based on the name in KANJI  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.japanese_name_latin_candidates_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameIn batch_first_last_name_in: A list of personal japanese names in KANJI, firstName = japaneseGivenName; lastName=japaneseSurname
        :return: BatchNameMatchCandidatesOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_first_last_name_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method japanese_name_latin_candidates_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_first_last_name_in' in local_var_params:
            body_params = local_var_params['batch_first_last_name_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/japaneseNameLatinCandidatesBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchNameMatchCandidatesOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def japanese_name_match(self, japanese_surname_latin, japanese_given_name_latin, japanese_name, **kwargs):  # noqa: E501
        """Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.japanese_name_match(japanese_surname_latin, japanese_given_name_latin, japanese_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str japanese_surname_latin: (required)
        :param str japanese_given_name_latin: (required)
        :param str japanese_name: (required)
        :return: RomanizedNameOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.japanese_name_match_with_http_info(japanese_surname_latin, japanese_given_name_latin, japanese_name, **kwargs)  # noqa: E501
        else:
            (data) = self.japanese_name_match_with_http_info(japanese_surname_latin, japanese_given_name_latin, japanese_name, **kwargs)  # noqa: E501
            return data

    def japanese_name_match_with_http_info(self, japanese_surname_latin, japanese_given_name_latin, japanese_name, **kwargs):  # noqa: E501
        """Return a score for matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.japanese_name_match_with_http_info(japanese_surname_latin, japanese_given_name_latin, japanese_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str japanese_surname_latin: (required)
        :param str japanese_given_name_latin: (required)
        :param str japanese_name: (required)
        :return: RomanizedNameOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['japanese_surname_latin', 'japanese_given_name_latin', 'japanese_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method japanese_name_match" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'japanese_surname_latin' is set
        if ('japanese_surname_latin' not in local_var_params or
                local_var_params['japanese_surname_latin'] is None):
            raise ValueError("Missing the required parameter `japanese_surname_latin` when calling `japanese_name_match`")  # noqa: E501
        # verify the required parameter 'japanese_given_name_latin' is set
        if ('japanese_given_name_latin' not in local_var_params or
                local_var_params['japanese_given_name_latin'] is None):
            raise ValueError("Missing the required parameter `japanese_given_name_latin` when calling `japanese_name_match`")  # noqa: E501
        # verify the required parameter 'japanese_name' is set
        if ('japanese_name' not in local_var_params or
                local_var_params['japanese_name'] is None):
            raise ValueError("Missing the required parameter `japanese_name` when calling `japanese_name_match`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'japanese_surname_latin' in local_var_params:
            path_params['japaneseSurnameLatin'] = local_var_params['japanese_surname_latin']  # noqa: E501
        if 'japanese_given_name_latin' in local_var_params:
            path_params['japaneseGivenNameLatin'] = local_var_params['japanese_given_name_latin']  # noqa: E501
        if 'japanese_name' in local_var_params:
            path_params['japaneseName'] = local_var_params['japanese_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/japaneseNameMatch/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RomanizedNameOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def japanese_name_match_batch(self, **kwargs):  # noqa: E501
        """Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.japanese_name_match_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameIn batch_first_last_name_in: A list of personal Japanese names in LATIN, firstName = japaneseGivenName; lastName=japaneseSurname
        :return: BatchNameMatchCandidatesOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.japanese_name_match_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.japanese_name_match_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def japanese_name_match_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Return a score for matching a list of Japanese names in KANJI ex. 山本 早苗 with romanized names ex. Yamamoto Sanae  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.japanese_name_match_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchFirstLastNameIn batch_first_last_name_in: A list of personal Japanese names in LATIN, firstName = japaneseGivenName; lastName=japaneseSurname
        :return: BatchNameMatchCandidatesOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_first_last_name_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method japanese_name_match_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_first_last_name_in' in local_var_params:
            body_params = local_var_params['batch_first_last_name_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/japaneseNameMatchBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchNameMatchCandidatesOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def japanese_name_match_feedback_loop(self, japanese_surname_latin, japanese_given_name_latin, japanese_name, **kwargs):  # noqa: E501
        """[CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.japanese_name_match_feedback_loop(japanese_surname_latin, japanese_given_name_latin, japanese_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str japanese_surname_latin: (required)
        :param str japanese_given_name_latin: (required)
        :param str japanese_name: (required)
        :return: RomanizedNameOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.japanese_name_match_feedback_loop_with_http_info(japanese_surname_latin, japanese_given_name_latin, japanese_name, **kwargs)  # noqa: E501
        else:
            (data) = self.japanese_name_match_feedback_loop_with_http_info(japanese_surname_latin, japanese_given_name_latin, japanese_name, **kwargs)  # noqa: E501
            return data

    def japanese_name_match_feedback_loop_with_http_info(self, japanese_surname_latin, japanese_given_name_latin, japanese_name, **kwargs):  # noqa: E501
        """[CREDITS 1 UNIT] Feedback loop to better perform matching Japanese name in KANJI ex. 山本 早苗 with a romanized name ex. Yamamoto Sanae  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.japanese_name_match_feedback_loop_with_http_info(japanese_surname_latin, japanese_given_name_latin, japanese_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str japanese_surname_latin: (required)
        :param str japanese_given_name_latin: (required)
        :param str japanese_name: (required)
        :return: RomanizedNameOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['japanese_surname_latin', 'japanese_given_name_latin', 'japanese_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method japanese_name_match_feedback_loop" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'japanese_surname_latin' is set
        if ('japanese_surname_latin' not in local_var_params or
                local_var_params['japanese_surname_latin'] is None):
            raise ValueError("Missing the required parameter `japanese_surname_latin` when calling `japanese_name_match_feedback_loop`")  # noqa: E501
        # verify the required parameter 'japanese_given_name_latin' is set
        if ('japanese_given_name_latin' not in local_var_params or
                local_var_params['japanese_given_name_latin'] is None):
            raise ValueError("Missing the required parameter `japanese_given_name_latin` when calling `japanese_name_match_feedback_loop`")  # noqa: E501
        # verify the required parameter 'japanese_name' is set
        if ('japanese_name' not in local_var_params or
                local_var_params['japanese_name'] is None):
            raise ValueError("Missing the required parameter `japanese_name` when calling `japanese_name_match_feedback_loop`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'japanese_surname_latin' in local_var_params:
            path_params['japaneseSurnameLatin'] = local_var_params['japanese_surname_latin']  # noqa: E501
        if 'japanese_given_name_latin' in local_var_params:
            path_params['japaneseGivenNameLatin'] = local_var_params['japanese_given_name_latin']  # noqa: E501
        if 'japanese_name' in local_var_params:
            path_params['japaneseName'] = local_var_params['japanese_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/japaneseNameMatchFeedbackLoop/{japaneseSurnameLatin}/{japaneseGivenNameLatin}/{japaneseName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RomanizedNameOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parse_japanese_name(self, japanese_name, **kwargs):  # noqa: E501
        """Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parse_japanese_name(japanese_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str japanese_name: (required)
        :return: PersonalNameParsedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parse_japanese_name_with_http_info(japanese_name, **kwargs)  # noqa: E501
        else:
            (data) = self.parse_japanese_name_with_http_info(japanese_name, **kwargs)  # noqa: E501
            return data

    def parse_japanese_name_with_http_info(self, japanese_name, **kwargs):  # noqa: E501
        """Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parse_japanese_name_with_http_info(japanese_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str japanese_name: (required)
        :return: PersonalNameParsedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['japanese_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parse_japanese_name" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'japanese_name' is set
        if ('japanese_name' not in local_var_params or
                local_var_params['japanese_name'] is None):
            raise ValueError("Missing the required parameter `japanese_name` when calling `parse_japanese_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'japanese_name' in local_var_params:
            path_params['japaneseName'] = local_var_params['japanese_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/parseJapaneseName/{japaneseName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PersonalNameParsedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def parse_japanese_name_batch(self, **kwargs):  # noqa: E501
        """Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parse_japanese_name_batch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameIn batch_personal_name_in: A list of personal names
        :return: BatchPersonalNameParsedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.parse_japanese_name_batch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.parse_japanese_name_batch_with_http_info(**kwargs)  # noqa: E501
            return data

    def parse_japanese_name_batch_with_http_info(self, **kwargs):  # noqa: E501
        """Infer the likely first/last name structure of a name, ex. 山本 早苗 or Yamamoto Sanae   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.parse_japanese_name_batch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BatchPersonalNameIn batch_personal_name_in: A list of personal names
        :return: BatchPersonalNameParsedOut
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['batch_personal_name_in']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method parse_japanese_name_batch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'batch_personal_name_in' in local_var_params:
            body_params = local_var_params['batch_personal_name_in']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api2/json/parseJapaneseNameBatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BatchPersonalNameParsedOut',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
